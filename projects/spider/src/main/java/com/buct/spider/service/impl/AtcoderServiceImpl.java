package com.buct.spider.service.impl;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.buct.spider.entity.Atcoder;import com.buct.spider.mapper.AtcoderMapper;import com.buct.spider.service.AtcoderService;import com.buct.spider.util.HttpUtil;import com.buct.spider.util.TimeUtils;import com.buct.spider.vo.AtcoderVO;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;/** * @author * @date 2023-07-16 21:39 */@Servicepublic class AtcoderServiceImpl extends ServiceImpl<AtcoderMapper, Atcoder> implements AtcoderService {    @Autowired    private AtcoderMapper atcoderMapper;    @Override    public void atcoderCrawling() {        try {            String result = HttpUtil.doGet("https://www.buctcoder.com/ACDC/api/atcoder/list");            JSONObject json = JSONObject.parseObject(result);            JSONArray data = json.getJSONArray("result");            List<AtcoderVO> list = new ArrayList<>();            for (int i = 0; i < data.size(); i++) {                JSONObject jsonObject = data.getJSONObject(i);                AtcoderVO atcoderVO = JSON.toJavaObject(jsonObject, AtcoderVO.class);                list.add(atcoderVO);            }            list.forEach(i -> {                Atcoder selectOne = atcoderMapper.selectOne(new LambdaQueryWrapper<Atcoder>()                        .eq(Atcoder::getId, i.getId()));                if (selectOne == null) {                    Atcoder atcoder = new Atcoder();                    atcoder.setId(i.getId())                            .setName(i.getName())                            .setType(i.getType())                            .setParticipate(i.getParticipate())                            .setStartTimeStamp(TimeUtils.timestampToString(                                    Long.parseLong(String.valueOf(i.getStartTimeStamp()))*1000))                            .setEndTimeStamp(TimeUtils.timestampToString( Long.parseLong(String.valueOf(i.getEndTimeStamp()))*1000));                    atcoderMapper.insert(atcoder);                }            });        } catch (Exception e) {            e.printStackTrace();        }    }}