package com.buct.spider.service.impl;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.buct.spider.entity.Student;import com.buct.spider.mapper.StudentMapper;import com.buct.spider.service.StudentService;import com.buct.spider.util.HttpUtil;import com.buct.spider.vo.StudentVO;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;/** * @author * @date 2023-07-16 15:56 */@Servicepublic class StudentServiceImpl extends ServiceImpl<StudentMapper, Student> implements StudentService {    @Autowired    private StudentMapper studentMapper;    @Override    public void studentCodeForcesCrawling() {        try {            String result = HttpUtil.doGet("https://www.buctcoder.com/ACDC/api/codeforces/rank");            JSONObject json = JSONObject.parseObject(result);            JSONArray data = json.getJSONArray("result");            List<StudentVO> list = new ArrayList<>();            for (int i = 0; i < data.size(); i++) {                JSONObject jsonObject = data.getJSONObject(i);                StudentVO codeforcesVO = JSON.toJavaObject(jsonObject, StudentVO.class);                list.add(codeforcesVO);            }            list.forEach(i -> {                Student selectOne = studentMapper.selectOne(new LambdaQueryWrapper<Student>()                        .eq(Student::getStuNo, i.getStuNo()));                if (selectOne == null) {                    Student student = new Student();                    student.setClassName(i.getClassname())                            .setCodeforcesId(i.getCodeforcesId())                            .setRealName(i.getRealname())                            .setSchoolName(i.getSchool())                            .setStuNo(i.getStuNo())                            .setYear(i.getYear());                    studentMapper.insert(student);                }            });        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public void studentAtcoderCrawling() {        try {            String result = HttpUtil.doGet("https://www.buctcoder.com/ACDC/api/atcoder/rank");            JSONObject json = JSONObject.parseObject(result);            JSONArray data = json.getJSONArray("result");            List<StudentVO> list = new ArrayList<>();            for (int i = 0; i < data.size(); i++) {                JSONObject jsonObject = data.getJSONObject(i);                StudentVO codeforcesVO = JSON.toJavaObject(jsonObject, StudentVO.class);                list.add(codeforcesVO);            }            list.forEach(i -> {                Student student = studentMapper.selectOne(new LambdaQueryWrapper<Student>()                        .eq(Student::getStuNo, i.getStuNo()));                if (student != null) {                    student.setAtcoderId(i.getAtcoderId());                    studentMapper.update(student,new LambdaQueryWrapper<Student>()                            .eq(Student::getStuNo, i.getStuNo()));                }            });        } catch (Exception e) {            e.printStackTrace();        }    }}